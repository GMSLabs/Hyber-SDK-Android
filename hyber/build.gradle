apply plugin: 'com.android.library'
apply plugin: 'realm-android'
apply plugin: 'jacoco-android'

repositories {
    mavenCentral()
}

project.group = 'com.hyber'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25

        // Needed for jUnit4 support.
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        consumerProguardFiles 'proguard.pro'

        buildConfigField 'String', 'API_URL_ma_registration', api_url_ma_registration
        buildConfigField 'String', 'API_URL_ma_update_device', api_url_ma_update_device
        buildConfigField 'String', 'API_URL_ma_all_devices', api_url_ma_all_devices
        buildConfigField 'String', 'API_URL_ma_revoke_device', api_url_ma_revoke_device
        buildConfigField 'String', 'API_URL_ma_message_history', api_url_ma_message_history
        buildConfigField 'String', 'API_URL_pd_receiver', api_url_pd_receiver
        buildConfigField 'String', 'API_URL_pc_receiver', api_url_pc_receiver
    }

//    buildTypes {
//        all {
//            testCoverageEnabled true
//        }
//    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile 'org.jetbrains:annotations:13.0'

    compile 'com.android.support:appcompat-v7:25.4.0'
    compile 'com.android.support:recyclerview-v7:25.4.0'

    compile 'com.google.android.gms:play-services-base:11.0.2'
    compile 'com.google.firebase:firebase-messaging:11.0.2'

    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.6'

    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'

    compile 'com.squareup.okhttp3:okhttp:3.4.1'

    compile 'com.googlecode.java-diff-utils:diffutils:1.3.0'

    provided "org.projectlombok:lombok:1.12.6"
    annotationProcessor "org.projectlombok:lombok:1.12.6"

    // Debug dependencies
//    compile 'com.facebook.stetho:stetho:1.4.1'
//    compile 'com.facebook.stetho:stetho-okhttp3:1.4.1'
//    compile 'com.uphyca:stetho_realm:2.0.0'

    // Tests
    testCompile 'junit:junit:4.12'
    testCompile "org.robolectric:robolectric:3.0"
    testCompile "org.mockito:mockito-core:1.10.19"
    testCompile 'org.robolectric:shadows-support-v4:3.0'

    testCompile "org.powermock:powermock-module-junit4:1.6.4"
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.4"
    testCompile "org.powermock:powermock-api-mockito:1.6.4"
    testCompile "org.powermock:powermock-classloading-xstream:1.6.4"


    androidTestCompile 'com.android.support.test:runner:0.5'
    // Set this dependency to use JUnit 4 rules
    androidTestCompile 'com.android.support.test:rules:0.5'
    // Set this dependency to build and run Espresso tests
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
}

apply plugin: 'maven'
apply plugin: 'signing'

def isSnapshot = version.endsWith('-SNAPSHOT')
def ossrhUsername = hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : System.getenv('CI_NEXUS_USERNAME')
def ossrhPassword = hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : System.getenv('CI_NEXUS_PASSWORD')

task setVersion {
    // The version will be derived from source
    project.version = null
    def sdkVersionFile = file('src/main/java/com/hyber/HyberSdkVersion.java')
    sdkVersionFile.eachLine {
        def matcher = (it =~ /(?:.*BUILD = \")(.*)(?:\".*)/)
        if (matcher.matches()) {
            project.version = matcher[0][1]
            return
        }
    }
    if (project.version.is('unspecified')) {
        throw new GradleScriptException('Version could not be found.', null)
    }
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "file://${project.buildDir}/../releases") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "file://${project.buildDir}/../snapshots") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
            name 'Hyber-SDK-Android'
            artifactId = 'hyber-messaging'
            packaging 'aar'
            description 'A library that gives you access to the powerful Hyber messaging cloud platform from your Android app.'
            url 'https://github.com/Incuube/Hyber-SDK-Android'

            scm {
                connection 'scm:git@github.com:Incuube/Hyber-SDK-Android.git'
                developerConnection 'scm:git@github.com:Incuube/Hyber-SDK-Android.git'
                url 'https://github.com/Incuube/Hyber-SDK-Android'
            }

            licenses {
                license {
                    name 'Apache License'
                    url 'https://github.com/Incuube/Hyber-SDK-Android/blob/master-2.0/LICENSE'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'hyber'
                    name 'Hyber'
                }
                developer {
                    id 'andrewkochura'
                    name 'Andrew Kochura'
                }
            }
        }
    }
}

uploadArchives.dependsOn(setVersion)

signing {
    required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // JDK 1.8 is more strict then 1.7. Have JDK 1.8 behave like 1.7 for javadoc generation
    if (org.gradle.internal.jvm.Jvm.current().getJavaVersion() == JavaVersion.VERSION_1_8) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

afterEvaluate {
    androidJavadocs.classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
}
