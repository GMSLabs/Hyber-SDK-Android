apply plugin: 'com.android.library'
apply plugin: 'realm-android'

repositories {
    mavenCentral()
}

project.group = 'com.hyber.android'

dependencies {
    compile deps.jetbAnnotations

    compile deps.supportRecyclerView
    compile deps.playServicesBase
    compile deps.firebaseMessaging

    compile deps.retrofit
    compile deps.retrofitGsonConv
    compile deps.retrofitRxAdapter
    compile deps.okhttp
    compile deps.rxandroid
    compile deps.rxjava

    compile deps.javaDiffUtils

    provided "org.projectlombok:lombok:1.12.6"
    apt "org.projectlombok:lombok:1.12.6"

    // Debug dependencies
    compile deps.stetho
    compile deps.stethoOkHttp
    compile deps.stethoRealm

    // Unit Tests
    testCompile deps.junit

    // Connected Tests
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        consumerProguardFiles 'proguard.pro'

        buildConfigField 'String', 'HOST_mobile_abonents', api_host_mobile_abonents
        buildConfigField 'String', 'HOST_push_dr_receiver', api_host_push_dr_receiver
        buildConfigField 'String', 'HOST_push_callback_receiver', api_host_push_callback_receiver
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
    }
}

apply plugin: 'maven'
apply plugin: 'signing'

def isSnapshot = version.endsWith('-SNAPSHOT')
def ossrhUsername = hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : System.getenv('CI_NEXUS_USERNAME')
def ossrhPassword = hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : System.getenv('CI_NEXUS_PASSWORD')

task setVersion {
    // The version will be derived from source
    project.version = null
    def sdkVersionFile = file('src/main/java/com/hyber/HyberSdkVersion.java')
    sdkVersionFile.eachLine {
        def matcher = (it =~ /(?:.*BUILD = \")(.*)(?:\".*)/)
        if (matcher.matches()) {
            project.version = matcher[0][1]
            return
        }
    }
    if (project.version.is('unspecified')) {
        throw new GradleScriptException('Version could not be found.', null)
    }
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "file://${project.buildDir}/../releases") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "file://${project.buildDir}/../snapshots") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
            name 'Hyber-Android-SDK'
            artifactId = 'hyber-android-sdk'
            packaging 'aar'
            description 'A library that gives you access to the powerful Hyber messaging cloud platform from your Android app.'
            url 'https://github.com/Incuube/Hyber-SDK-Android'

            scm {
                connection 'scm:git@github.com:Incuube/Hyber-SDK-Android.git'
                developerConnection 'scm:git@github.com:Incuube/Hyber-SDK-Android.git'
                url 'https://github.com/Incuube/Hyber-SDK-Android'
            }

            licenses {
                license {
                    name 'Apache License'
                    url 'https://github.com/Incuube/Hyber-SDK-Android/blob/master-2.0/LICENSE'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'hyber'
                    name 'Hyber'
                }
            }
        }
    }
}

uploadArchives.dependsOn(setVersion)

signing {
    required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // JDK 1.8 is more strict then 1.7. Have JDK 1.8 behave like 1.7 for javadoc generation
    if (org.gradle.internal.jvm.Jvm.current().getJavaVersion() == JavaVersion.VERSION_1_8) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

afterEvaluate {
    androidJavadocs.classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
}
